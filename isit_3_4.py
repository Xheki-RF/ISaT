# -*- coding: utf-8 -*-
"""isit_3_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MgpjyGWZYQiC9fS8Yh55jJC9tawrpFKp
"""

import pandas as pd

# Reading data from csv
df = pd.read_csv("ecoli.data", sep="\s+", names=["Sequence name",  "mcg", "gvh", "lip", "chg", "aac", "alm1",
                                       "alm2", "class"])

# Viewing the dataframe
df

"""#Using T-SNE#"""

from sklearn.manifold import TSNE
import numpy as np
import seaborn as sns

# Using one hot encoding to encode categorial signs into 0s and 1s
df_one_hot = pd.get_dummies(df, columns=["Sequence name", "class"])

# Viewing encoded dataframe
df_one_hot

# Applying T-SNE algorythm to the dataset
X_embedded = TSNE(n_components=2, perplexity=20, angle=0.6).fit_transform(df_one_hot)
X, Y = X_embedded[:, 0], X_embedded[:, 1]

# Plotting
sns.scatterplot(x=X, y=Y, hue=df["class"])

"""#Using UMAP#

"""

import umap.umap_ as umap
import numpy as np
import matplotlib.pyplot as plt

# Applying UMAP algorythm to the dataset
reducer = umap.UMAP(n_neighbors=15, min_dist=0.8, n_components=2, metric='euclidean')
embedding = reducer.fit_transform(df_one_hot)
X_umap, Y_umap = embedding[:, 0], embedding[:, 1]

# Plotting
sns.scatterplot(x=X_umap, y=Y_umap, hue=df["class"])

"""#MinMax scaler#"""

from sklearn.preprocessing import MinMaxScaler

# Creating copies of needed columns
df_copy_min_max = df[["mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2"]].copy()

# Applying the scaler
scaler_min_max = MinMaxScaler().set_output(transform="pandas")
df_copy_min_max = scaler_min_max.fit_transform(df_copy_min_max)

# Copying original dataset
df_min_max = df.copy()

# Replacing old columns with scaled ones
df_min_max[["mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2"]] = df_copy_min_max

# Encoding categorial signs
df_min_max = pd.get_dummies(df_min_max, columns=["Sequence name", "class"])

# Encoded dataset
df_min_max

"""#Standard scaler#"""

from sklearn.preprocessing import StandardScaler

df_copy_standard = df[["mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2"]].copy()

scaler_standard = StandardScaler().set_output(transform="pandas")
df_copy_standard = scaler_standard.fit_transform(df_copy_standard)

df_standard = df.copy()

df_standard[["mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2"]] = df_copy_standard
df_standard = pd.get_dummies(df_standard, columns=["Sequence name", "class"])

# Encoded dataset
df_standard

"""#Robust scaler#"""

from sklearn.preprocessing import RobustScaler

df_copy_robust = df[["mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2"]].copy()

scaler_robust = RobustScaler().set_output(transform="pandas")
df_copy_robust = scaler_robust.fit_transform(df_copy_robust)

df_robust = df.copy()

df_robust[["mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2"]] = df_copy_robust
df_robust = pd.get_dummies(df_robust, columns=["Sequence name", "class"])

# Encoded dataset
df_robust

"""#Creating T-SNE function to simplify visualisation#"""

def t_sne_draw(dataframe, encoded_dataframe, n_components, perplexity, angle):
  X_embedded = TSNE(n_components=n_components, perplexity=perplexity, angle=angle).fit_transform(encoded_dataframe)
  X, Y = X_embedded[:, 0], X_embedded[:, 1]
  sns.scatterplot(x=X, y=Y, hue=dataframe["class"])

"""#Creating UMAP function to simplify visualisation#"""

def umap_draw(dataframe, encoded_dataframe, n_components, n_neighbors, min_dist):
  reducer = umap.UMAP(n_neighbors=n_neighbors, min_dist=min_dist, n_components=n_components, metric='euclidean')
  embedding = reducer.fit_transform(encoded_dataframe)
  X_umap, Y_umap = embedding[:, 0], embedding[:, 1]
  sns.scatterplot(x=X_umap, y=Y_umap, hue=dataframe["class"])

"""#Comparison analysis using T-SNE#"""

# MinMax scaler
t_sne_draw(df, df_min_max, 2, 20, 0.8)

# Standard scaler
t_sne_draw(df, df_standard, 2, 20, 0.8)

# Robust scaler
t_sne_draw(df, df_robust, 2, 20, 0.8)

"""#Comparison analysis using UMAP#"""

# MinMax scaler
umap_draw(df, df_min_max, 2, 15, 0.5)

# Standard scaler
umap_draw(df, df_standard, 2, 15, 0.5)

# Robust scaler
umap_draw(df, df_robust, 2, 15, 0.5)